% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fast_cooccur.R
\name{fast_cooccur}
\alias{fast_cooccur}
\title{Fast Cooccur - compute exact cooccurence betwenn species pairs}
\usage{
fast_cooccur(spp_site_mat, chunks = 2, verbose = TRUE, progress = TRUE)
}
\arguments{
\item{spp_site_mat}{A apecies (rows) x sites (column) matrix.}

\item{chunks}{The number of chunks into which the data should be split.
If yorking in parallel mode, it is wise to keep it a multiple of the computing units (cores or workers).}

\item{verbose}{TRUE or FALSE. If TRUE, display some info about the computation}

\item{progress}{TRUE or FALSE. If TRUE, display a progress bar in parallel mode. Only meaningful if chunks is greather
than the number of computing units}
}
\value{
A cooccur object
}
\description{
Fast Cooccur - compute exact cooccurence betwenn species pairs
}
\details{
Fast Cooccur relies on \code{\link[future]{future}} and \code{\link[furrr]{future_map_dfr}} to handle parallel computing.
This way fast_cooccur is backend - agnostic. You can specify the bakend with the function \code{\link[future]{plan}}.
By default, it runs with \code{plan(sequential)}, which run as a single R process. To go parallel on a desktop machine, call \code{plan(multiprocess)}
before calling \code{fast_cooccur}. On windows machines, it will fork the current R Session. On Unix machines (OSX nd Linux), it will go multicore.

If you need to process very large matrices in a short amount of time, it is possible to run the function on a HPC configured to run the package future.

fast_coocur() will perform a strict sanity check on spp_site_mat before launching computation, and will stop execution if any of the conditions are not met.
Please ensure that :
\enumerate{
  \item spp_site_mat is a matrix (not a dataframe)
  \item all species are present at least once in the dataset
  \item you can give row.names to yourmatrix. It might be useful for downstream analysis.
}
}
